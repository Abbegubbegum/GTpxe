#!/bin/sh
# /etc/local.d/run_diagnostic.start

set -u

print_green() {
    printf '\033[0;32m%s\033[0m\n' "$1"
}

# same for red
print_red() {
    printf '\033[0;31m%s\033[0m\n' "$1"
}

# This block is for creating a watcher that reads if "q" is pressed to quit the tests early without waiting for input.

start_abort_watcher() {
    (
        exec < "/dev/tty1" > /dev/null 2>&1
        
        OLDSTTY=$(stty -g)
        stty -echo -icanon min 0 time 0
        
        while :; do
            char=$(dd bs=1 count=1)
            if [ "$char" = "q" ]; then
                print_red "[ABORT] Key press received. Exiting tests." > /dev/tty1
                kill -KILL "$$"
                break
            fi
            sleep 0.1
        done
        
        stty "$OLDSTTY"
    ) & ABORT_WATCHER_PID=$!
}

cleanup_abort_watcher() {
    [ -n "$ABORT_WATCHER_PID" ] && kill "$ABORT_WATCHER_PID"
}

start_abort_watcher

run_in_vt() {
    # which VT are we currently on? (e.g. "tty1")
    orig=$(cat /sys/class/tty/tty0/active)   # outputs "ttyN"
    orig=${orig#tty}
    
    # run TUI on a different VT (let openvt pick a free one)
    # -s: switch to it, -w: wait for it to exit, -f: force if busy
    openvt -swf -- "$1"
    
    # return to where we started
    chvt "$orig"
    
    # (optional) if the keyboard feels weird back on tty$orig:
    stty sane </dev/tty"$orig" || true
    
}

# This function is used to run the keyboard test in a separate VT.
run_keyboard_test() {
    run_in_vt /home/ssh/binaries/keyboard_test
}

run_screen_test() {
    run_in_vt /home/ssh/binaries/screen_test
}

# Redirect stdout and stderr to /dev/tty1 for visibility
# Its needed because the script is run in a non-interactive environment so stdout is not set yet.
exec > /dev/tty1 2>&1

# This script runs the diagnostic tests for the client application.
print_green "Running diagnostic tests..."
print_green "Press 'q' to abort the tests early."

# Wait for early exit
sleep 2

printf "\n"
# Get core count
CORE_COUNT=$(nproc)
print_green "Detected $CORE_COUNT CPU cores."

print_green "Starting Memory/CPU Test with stress-ng"

# if ! stress-ng --cpu "$CORE_COUNT" --vm "$CORE_COUNT" --vm-bytes 75% --timeout 30s --metrics-brief
# then
#     print_red "Memory/CPU Test failed."
# cleanup_abort_watcher
#     exit 1
# else
#     print_green "Memory/CPU Test completed successfully."
# fi

# print_green "Running Memtest for memory testing..."

# if ! memtester 100M 1
# then
#     print_red "Memtest failed."
# cleanup_abort_watcher
#     exit 1
# else
#     print_green "Memtest completed successfully."
# fi

print_green "Running Disk Selftest..."
if ! python3 /home/ssh/python/disk_health.py
then
    print_red "Disk check failed."
    cleanup_abort_watcher
    exit 1
else
    print_green "Disk selftest completed successfully"
fi

print_green "Battery Status:"
acpi -V

print_green "Test Serial Ports..."

if ! /home/ssh/scripts/serial_test.sh
then
    print_red "Serial test possible failure."
    # Don't exit here because for the DBF, there are serial port chips that are not connected to anything.
    # It fails but its expected.
    #exit 1
else
    print_green "Serial test completed successfully."
fi

#Kill the watcher before starting the keyboard test
cleanup_abort_watcher

print_green "Running Keyboard Test..."

run_keyboard_test

print_green "Running screen test..."

run_screen_test

print_green "All tests completed. GTUA"

exit 0
