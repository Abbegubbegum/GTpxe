#!/bin/sh
# /etc/local.d/run_diagnostic.start

set -eu

print_green() {
  echo -e "\033[0;32m$1\033[0m"
}

# same for red
print_red() {
  echo -e "\033[0;31m$1\033[0m"
}

# This block is for creating a watcher that reads if "q" is pressed to quit the tests early without waiting for input.

start_abort_watcher() {
    (
        exec < "/dev/tty1" > /dev/null 2>&1

        OLDSTTY=$(stty -g)
        stty -echo -icanon min 0 time 0

        while :; do
            char=$(dd bs=1 count=1 2>/dev/null)
            if [ "$char" = "q" ]; then
                print_red "[ABORT] Key press received. Exiting tests." > /dev/tty1
                kill -KILL "$$"
                break
            fi
            sleep 0.1
        done

        stty "$OLDSTTY"
    ) & ABORT_WATCHER_PID=$!
}

cleanup_abort_watcher() {
    [ -n "$ABORT_WATCHER_PID" ] && kill "$ABORT_WATCHER_PID" 2>/dev/null || true
}

trap cleanup_abort_watcher EXIT INT TERM

start_abort_watcher

# Redirect stdout and stderr to /dev/tty1 for visibility
# Its needed because the script is run in a non-interactive environment so stdout is not set yet.
exec > /dev/tty1 2>&1

# This script runs the diagnostic tests for the client application.
print_green "Running diagnostic tests for the client application..."
print_green "Press 'q' to abort the tests early."

# Wait for early exit
sleep 2

# Get core count
CORE_COUNT=$(nproc)
print_green "Detected $CORE_COUNT CPU cores."

print_green "Starting Memory/CPU Test with stress-ng"

stress-ng --cpu $CORE_COUNT --vm $CORE_COUNT --vm-bytes 75% --timeout 30s --metrics-brief

if [ $? -ne 0 ]; then
    print_red "Memory/CPU Test failed."
    exit 1
else
    print_green "Memory/CPU Test completed successfully."
fi

print_green "Running Memtest for memory testing..."

memtester 100M 1

if [ $? -ne 0 ]; then
    print_red "Memtest failed."
    exit 1
else
    print_green "Memtest completed successfully."
fi

print_green "Test Serial Ports..."

/home/ssh/scripts/serial_test.sh

if [ $? -ne 0 ]; then
    print_red "Serial test failed."
    exit 1
else
    print_green "Serial test completed successfully."
fi

print_green "Running Keyboard Test..."

/home/ssh/keyboard_test

if [ $? -ne 0 ]; then
    print_red "Keyboard Test failed."
    exit 1
else
    print_green "Keyboard Test completed successfully."
fi

exit 0
